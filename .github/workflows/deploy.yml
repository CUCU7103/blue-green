name: Deploy to EC2 (Blue-Green)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Java 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4️⃣ 빌드 JAR
      - name: Build JAR
        run: ./gradlew clean build -x test

      # 5️⃣ 서버 선택 및 환경 변수 설정
      - name: Set deployment variables
        run: |
          if [ $((GITHUB_RUN_NUMBER % 2)) -eq 0 ]; then
            echo "TARGET=server1" >> $GITHUB_ENV
            echo "HOST=${{ secrets.EC2_HOST_SERVER1 }}" >> $GITHUB_ENV
          else
            echo "TARGET=server2" >> $GITHUB_ENV
            echo "HOST=${{ secrets.EC2_HOST_SERVER2 }}" >> $GITHUB_ENV
          fi
          echo "Deploying to target: $TARGET"

      # 6️⃣ SSH 키 준비 (+ 줄바꿈/권한/포맷 점검)
      - name: Setup SSH key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          if [ "${TARGET:-}" = "server1" ]; then
            printf '%s' '${{ secrets.EC2_KEY_SERVER1 }}' > ~/.ssh/ec2_key.pem
          else
            printf '%s' '${{ secrets.EC2_KEY_SERVER2 }}' > ~/.ssh/ec2_key.pem
          fi

          # Windows 줄바꿈(CRLF) 방지
          perl -pi -e 's/\r\n?/\n/g' ~/.ssh/ec2_key.pem

          # 권한 설정
          chmod 600 ~/.ssh/ec2_key.pem

          # known_hosts 등록
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

          # ✅ 키 포맷/권한/존재 확인(민감정보 미노출)
          echo "=== SSH key quick checks ==="
          test -s ~/.ssh/ec2_key.pem || (echo "Key file empty" && exit 1)
          grep -q "BEGIN " ~/.ssh/ec2_key.pem || (echo "Missing BEGIN header" && exit 1)
          grep -q "END " ~/.ssh/ec2_key.pem || (echo "Missing END footer" && exit 1)
          ls -l ~/.ssh
          echo "BEGIN/END headers:"
          head -n1 ~/.ssh/ec2_key.pem | sed 's/.*/(redacted) BEGIN .../'
          tail -n1 ~/.ssh/ec2_key.pem | sed 's/.*/(redacted) END .../'
          echo "Known hosts entries for $HOST:"
          grep -F "$HOST" ~/.ssh/known_hosts || echo "No known_hosts entry (ok if StrictHostKeyChecking=no)"
    

      # 7️⃣ JAR + Dockerfile을 EC2로 전송 (SSH/SCP 디버그: -vvv, 지정키만: IdentitiesOnly)
      - name: Deploy app files to EC2
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying to $HOST (Target: $TARGET)"
          SSH_OPTS="-i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no -o IdentitiesOnly=yes"

          # 연결 테스트(상세 로그)
          ssh -vvv $SSH_OPTS ubuntu@"$HOST" "echo Connected to \$(hostname) && mkdir -p /home/ubuntu/app"

          # 파일 복사(상세 로그)
          scp -vvv $SSH_OPTS build/libs/*.jar ubuntu@"$HOST":/home/ubuntu/app/
          scp -vvv $SSH_OPTS Dockerfile ubuntu@"$HOST":/home/ubuntu/app/

          # 권한 설정
          ssh -vvv $SSH_OPTS ubuntu@"$HOST" "chmod 755 /home/ubuntu/app/*.jar"

      # 8️⃣ Docker 컨테이너 재시작 (Dockerfile 사용)
      - name: Restart application with Docker
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@$HOST "
            # 기존 컨테이너 제거
            sudo docker stop app || true
            sudo docker rm app || true
            sudo docker rmi myapp || true

            # 이미지 빌드
            echo 'Building Docker image from /home/ubuntu/app...'
            cd /home/ubuntu/app
            sudo docker build -t myapp .

            # 컨테이너 실행
            echo 'Starting new application container...'
            sudo docker run -d --name app \
              --restart unless-stopped \
              -p 8080:8080 \
              myapp

            # 헬스 체크
            echo 'Waiting for application to start...'
            sleep 10
            if sudo docker ps | grep -q 'app.*Up'; then
              echo 'Deployment successful! Application is running.'
            else
              echo 'Deployment failed! Container is not running.'
              sudo docker logs app
              exit 1
            fi
          "

      # 9️⃣ 정리
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/ec2_key.pem
